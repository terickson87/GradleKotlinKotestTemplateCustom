import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.2/userguide/building_java_projects.html
 */

plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    id("org.jetbrains.kotlin.jvm") version "1.9.0"

    // Apply the application plugin to add support for building a CLI application in Java.
    application

    jacoco
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

val kotestVersion = "5.6.2"
val mockKVersion = "1.13.5"

dependencies {
    // Align versions of all Kotlin components
    // implementation(platform("org.jetbrains.kotlin:kotlin-bom"))

    // Use the Kotlin JDK 8 standard library.
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")

    // This dependency is used by the application.
    implementation("com.google.guava:guava:30.1.1-jre")

    // Use the Kotlin test library.
    testImplementation("org.jetbrains.kotlin:kotlin-test")

    // Use the Kotlin JUnit integration.
    // testImplementation("org.jetbrains.kotlin:kotlin-test-junit")

    // Kotest
    testImplementation("io.kotest:kotest-runner-junit5:$kotestVersion")
    testImplementation("io.kotest:kotest-assertions-core:$kotestVersion")
    testImplementation("io.kotest:kotest-property:$kotestVersion")

    // MockK
    testImplementation("io.mockk:mockk:$mockKVersion")
}

tasks.withType<Test>().configureEach {
    useJUnitPlatform()
 }
 
tasks.test {
    finalizedBy(tasks.jacocoTestReport) // report is always generated after tests run
}

kotlin {
    jvmToolchain(11)
}

application {
    // Define the main class for the application.
    mainClass.set("demo.AppKt")
}